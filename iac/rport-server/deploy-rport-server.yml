parameters:
- name: hubId
  displayName: Hub Id
  type: string
- name: location
  displayName: Location
  type: string
- name: resourceGroupName
  displayName: Resource Group
  type: string
- name: keyVaultName
  displayName: Key Vault
  type: string
- name: adminVmPasswordSecretName
  displayName: Vm Password Secret Name
  type: string

trigger: none

name: CreateRPortVM

variables:
  deploymentName: 'CreateRPortSvr'
  vmImageName: 'ubuntu-latest'
  azureServiceConnection: 'DalapagosServiceP'
  keyVault: ${{ parameters.keyVaultName }}
  vmName: 'dlpg-tnls-vm-${{ lower(parameters.hubId) }}'
  fqdn: 'dalapagos-${{ lower(parameters.hubId) }}.${{ lower(parameters.location) }}.cloudapp.azure.com'
  templateFile: './create-rportsvr.bicep'

pool:
  vmImage: $(vmImageName)

steps:
- task: AzureKeyVault@2
  displayName: Get VM pwd from Key Vault
  inputs:
    azureSubscription: $(azureServiceConnection)
    KeyVaultName: $(keyVault)
    SecretsFilter: ${{ parameters.adminVmPasswordSecretName }}
    
- task: AzureCLI@2
  name: DeployBicep
  displayName: Create VM
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: bash
    scriptLocation: inlineScript
    useGlobalConfig: false
    inlineScript: |
      az --version
      if [ "true" == $(az group exists --name ${{ parameters.resourceGroupName }}) ]; then :; else az group create --name ${{ parameters.resourceGroupName }} --location ${{ parameters.location }}; fi;
      az deployment group create --name $(deploymentName) --resource-group ${{ parameters.resourceGroupName }} --template-file $(templateFile) --parameters 'hubId=${{ lower(parameters.hubId) }}' 'vmName=$(vmName)' 'vmSize=Standard_B1s' 'adminPassword=$(${{ parameters.adminVmPasswordSecretName }})'

- task: AzureCLI@2
  name: BicepOutput
  displayName: Get Outputs from VM
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      $out = az deployment group show -g ${{ parameters.resourceGroupName }} -n $(deploymentName) | convertfrom-json | foreach properties | foreach outputs

      $provisionOutputs = [PSCustomObject]@{}
      $out | Get-Member -MemberType NoteProperty | ForEach-Object {

          $name = $_.name
          $provisionOutputs | Add-Member -MemberType NoteProperty -Name $name -value $out.$name.value
          Write-Host "##vso[task.setvariable variable=$($name);isOutput=true]$($out.$name.value)"
      }

      $provisionOutputs

- task: AzureCLI@2
  name: InstallRport
  displayName: Install RPort on VM
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Installing sshpass."
      sudo apt-get install sshpass
      sudo apt-get install dos2unix
      dos2unix ./install-rport.sh
      sh ./install-rport.sh $(${{ parameters.adminVmPasswordSecretName }}) $(BicepOutput.sshUserIp) $(fqdn)
      sshpass -p $(${{ parameters.adminVmPasswordSecretName }}) scp "$(BicepOutput.sshUserIp)":./rportd-installation.txt ./
      RPORTPWD="$(echo $(grep Password rportd-installation.txt) | cut -d':' -f2 | sed -e 's/^[[:space:]]*//')"
      echo "##vso[task.setvariable variable=ARPortPwd;isOutput=true]$RPORTPWD"
      sshpass -p $(${{ parameters.adminVmPasswordSecretName }}) scp "$(BicepOutput.sshUserIp)":./fingerprints.txt ./
      FINGRPRNT="$(echo $(grep ED25519 fingerprints.txt) | cut -d':' -f2 | cut -d' ' -f1)"
      echo "##vso[task.setvariable variable=ARPortFp;isOutput=true]$FINGRPRNT"

- task: AzureCLI@2
  displayName: Save RPort Password
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Saving RPort password to Key Vault."
      az keyvault secret set --name '${{ parameters.hubId }}-Tnls-RPortPass' --vault-name $(keyVault) --value $(InstallRport.ARPortPwd)

- task: AzureCLI@2
  displayName: Save RPort Fingerprint
  inputs:
    azureSubscription: $(azureServiceConnection)
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
      echo "Saving RPort vm fingerprint to Key Vault."
      az keyvault secret set --name '${{ parameters.hubId }}-Tnls-Finger' --vault-name $(keyVault) --value $(InstallRport.ARPortFp)
